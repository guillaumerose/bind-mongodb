MongoDB module for Bind9 (lastest version)
This is just a simple hack in order to use MongoDB as database
(instead of LDAP).

Warning : authority section is static

Install :

* Modify conf/named.conf to match your configuration
* Modifiy SOA record in bin/named/mongodb.c in authority function
* Build as usual
  * ./configure
  * make
  * make install
* Run named

Model :

Bind will search in your collection in your db an entry like this :

{
  "user" : "username",
  "password" : "password (radius for instance)",
  "computers" : [
    {
      "dns" : "subdomain.myzone.eu.",
      "ip" : "192.168.1.14"
    },
    {
      "dns" : "othersubdomain.myzone.eu.",
      "ip" : "192.168.1.15"
    }
  ]
}

Configuration :
zone "myzone.eu" {
	type master;
	database "time 127.0.0.1 27017 A production.users computers.dns dns ip NULL .myzone.eu.";
};

where 
* 127.0.0.1 is the server ip, 
* 27017, server port,
* A, answer type,
* production.users, db.collection,
* computers.dns, path in document to find data,
* dns, request field to match
* ip, answer field
* search prefix
* search suffix

OR

{
	"dns" : "subdomain.zone.fr.",
	"ip" : "192.168.0.1"
}

Configuration :
zone "myzone.eu" {
	type master;
	database "time 127.0.0.1 27017 A production.users dns dns ip";
};

Reverse dns and data dpulication

To avoid duplication you can declare your zones like this :

zone "zone.fr" {
	type master;
	database "mongo 127.0.0.1 27017 A production.users computers.dns dns ip NULL .zone.fr.";
};

zone "0.168.192.in-addr.arpa" {
	type master;
	database "mongo 127.0.0.1 27017 PTR production.users computers.ip ip dns 192.168.0. NULL"; 
};

The two last arguments are the search prefix and the search suffix. 
Query looks like { "computers.ip" : "[PREFIX]8[SUFFIX]" }) for "nslookup 192.168.0.8"


TODO :
* Handle lb._dns-sd._udp and others requests
* Better handling of reconnect (free memory !)
* Replica set
* Log level

(c) Guillaume Rose
Under the same licence as Bind
